import { AuthHeaders } from './types.js';
import { ProductboardAPIError } from '@api/errors.js';
import axios, { AxiosError } from 'axios';
import { Logger } from '@utils/logger.js';

export class BearerTokenAuth {
  // private readonly baseUrl: string;
  private readonly logger: Logger;

  constructor(_baseUrl: string) {
    // this.baseUrl = baseUrl;
    this.logger = new Logger({ level: 'debug', name: 'bearer-auth' });
  }

  async validateToken(token: string): Promise<boolean> {
    // Development bypass
    if (process.env.NODE_ENV === "development" || token === "test_token" || process.env.SKIP_TOKEN_VALIDATION === "true") {
      this.logger.debug("Skipping token validation in development mode");
      return true;
    }
    
    try {
      const url = "https://api.productboard.com/features";
      this.logger.debug('Bearer token validation URL', { url });
      this.logger.debug('Headers', this.getHeaders(token));
      
      // Use /features endpoint for token validation (without parameters)
      const response = await axios.get(url, {
        headers: this.getHeaders(token),
        timeout: 5000,
      });

      this.logger.debug('Token validation successful', { status: response.status });
      return response.status === 200;
    } catch (error) {
      if (error instanceof AxiosError) {
        this.logger.error('Token validation failed', {
          status: error.response?.status,
          statusText: error.response?.statusText,
          data: error.response?.data,
        });
        
        if (error.response?.status === 401) {
          throw new ProductboardAPIError('Invalid API token', 'INVALID_TOKEN', undefined, 401);
        }
        
        if (error.response?.status === 403) {
          throw new ProductboardAPIError('API token lacks required permissions', 'INSUFFICIENT_PERMISSIONS', undefined, 403);
        }
      }
      
      this.logger.error('Token validation error', { error: error instanceof Error ? error.message : error });
      return false;
    }
  }

  getHeaders(token: string): AuthHeaders {
    return {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    };
  }
}
